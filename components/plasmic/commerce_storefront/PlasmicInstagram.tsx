// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 22sdoN4aX8y6Pu1pTjChkF
// Component: SXdIN0VA4a2nJu
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { useScreenVariants as useScreenVariants_0MRtZvbV1Afi8D } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 0MRtZvbV1AFI8D/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_commerce_storefront.module.css"; // plasmic-import: 22sdoN4aX8y6Pu1pTjChkF/projectcss
import sty from "./PlasmicInstagram.module.css"; // plasmic-import: SXdIN0VA4a2nJu/css

import RightArrowIcon from "./icons/PlasmicIcon__RightArrow"; // plasmic-import: DyijSpL5ETAPCK/icon

export type PlasmicInstagram__VariantMembers = {};

export type PlasmicInstagram__VariantsArgs = {};
type VariantPropType = keyof PlasmicInstagram__VariantsArgs;
export const PlasmicInstagram__VariantProps = new Array<VariantPropType>();

export type PlasmicInstagram__ArgsType = {};
type ArgPropType = keyof PlasmicInstagram__ArgsType;
export const PlasmicInstagram__ArgProps = new Array<ArgPropType>();

export type PlasmicInstagram__OverridesType = {
  root?: p.Flex<"section">;
  h3?: p.Flex<"h3">;
  link?: p.Flex<"a"> & Partial<LinkProps>;
  text?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
};

export interface DefaultInstagramProps {
  className?: string;
}

function PlasmicInstagram__RenderFunc(props: {
  variants: PlasmicInstagram__VariantsArgs;
  args: PlasmicInstagram__ArgsType;
  overrides: PlasmicInstagram__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_0MRtZvbV1Afi8D()
  });

  return (
    <p.Stack
      as={"section"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__pEqAq)}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__crV6P)}
        >
          <h3
            data-plasmic-name={"h3"}
            data-plasmic-override={overrides.h3}
            className={classNames(
              projectcss.all,
              projectcss.h3,
              projectcss.__wab_text,
              sty.h3
            )}
          >
            {"Follow us on Instagram for \nmore updates"}
          </h3>

          {true ? (
            <p.Stack
              as={p.PlasmicLink}
              data-plasmic-name={"link"}
              data-plasmic-override={overrides.link}
              hasGap={true}
              className={classNames(projectcss.all, projectcss.a, sty.link)}
              component={Link}
              href={"/item" as const}
              platform={"nextjs"}
            >
              <div
                data-plasmic-name={"text"}
                data-plasmic-override={overrides.text}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text
                )}
              >
                {"See more product"}
              </div>

              <RightArrowIcon
                data-plasmic-name={"svg"}
                data-plasmic-override={overrides.svg}
                className={classNames(projectcss.all, sty.svg)}
                role={"img"}
              />
            </p.Stack>
          ) : null}
        </p.Stack>
      </p.Stack>

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__bfrLz)}
      >
        {true ? (
          <div className={classNames(projectcss.all, sty.freeBox__r4NFx)}>
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__yRqYr)}
              displayHeight={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? ("100%" as const)
                  : ("250px /* plasmic-token: -RiWUkLjMIqGe- */" as const)
              }
              displayMaxHeight={"none" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"100%" as const}
              loading={"lazy" as const}
              src={{
                src: "/plasmic/commerce_storefront/images/_11Png.png",
                fullWidth: 544,
                fullHeight: 544,
                aspectRatio: undefined
              }}
            />
          </div>
        ) : null}
        {true ? (
          <div className={classNames(projectcss.all, sty.freeBox__wnP2)}>
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img___9S3K)}
              displayHeight={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? ("100%" as const)
                  : ("250px /* plasmic-token: -RiWUkLjMIqGe- */" as const)
              }
              displayMaxHeight={"none" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"100% /* plasmic-token: aLVECrA8QvDSKM */" as const}
              loading={"lazy" as const}
              src={{
                src: "/plasmic/commerce_storefront/images/_2Jpg.jpeg",
                fullWidth: 640,
                fullHeight: 640,
                aspectRatio: undefined
              }}
            />
          </div>
        ) : null}
        {true ? (
          <div className={classNames(projectcss.all, sty.freeBox__wzJDi)}>
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__xEaVy)}
              displayHeight={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? ("100%" as const)
                  : ("250px /* plasmic-token: -RiWUkLjMIqGe- */" as const)
              }
              displayMaxHeight={"none" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"100% /* plasmic-token: aLVECrA8QvDSKM */" as const}
              loading={"lazy" as const}
              src={{
                src: "/plasmic/commerce_storefront/images/_3Jpg.jpeg",
                fullWidth: 430,
                fullHeight: 426,
                aspectRatio: undefined
              }}
            />
          </div>
        ) : null}
        {true ? (
          <div className={classNames(projectcss.all, sty.freeBox___6PUyM)}>
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__jhaed)}
              displayHeight={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? ("100%" as const)
                  : ("250px /* plasmic-token: -RiWUkLjMIqGe- */" as const)
              }
              displayMaxHeight={"none" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"100% /* plasmic-token: aLVECrA8QvDSKM */" as const}
              loading={"lazy" as const}
              src={{
                src: "/plasmic/commerce_storefront/images/_4Jpg.jpeg",
                fullWidth: 406,
                fullHeight: 400,
                aspectRatio: undefined
              }}
            />
          </div>
        ) : null}
        {true ? (
          <div className={classNames(projectcss.all, sty.freeBox__iItL8)}>
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__dDfDf)}
              displayHeight={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? ("100%" as const)
                  : ("250px /* plasmic-token: -RiWUkLjMIqGe- */" as const)
              }
              displayMaxHeight={"none" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? ("auto" as const)
                  : ("100% /* plasmic-token: aLVECrA8QvDSKM */" as const)
              }
              loading={"lazy" as const}
              src={{
                src: "/plasmic/commerce_storefront/images/_5Jpg.jpeg",
                fullWidth: 640,
                fullHeight: 639,
                aspectRatio: undefined
              }}
            />
          </div>
        ) : null}
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "h3", "link", "text", "svg"],
  h3: ["h3"],
  link: ["link", "text", "svg"],
  text: ["text"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "section";
  h3: "h3";
  link: "a";
  text: "div";
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicInstagram__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicInstagram__VariantsArgs;
    args?: PlasmicInstagram__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicInstagram__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicInstagram__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicInstagram__ArgProps,
      internalVariantPropNames: PlasmicInstagram__VariantProps
    });

    return PlasmicInstagram__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicInstagram";
  } else {
    func.displayName = `PlasmicInstagram.${nodeName}`;
  }
  return func;
}

export const PlasmicInstagram = Object.assign(
  // Top-level PlasmicInstagram renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h3: makeNodeComponent("h3"),
    link: makeNodeComponent("link"),
    text: makeNodeComponent("text"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicInstagram
    internalVariantProps: PlasmicInstagram__VariantProps,
    internalArgProps: PlasmicInstagram__ArgProps
  }
);

export default PlasmicInstagram;
/* prettier-ignore-end */
