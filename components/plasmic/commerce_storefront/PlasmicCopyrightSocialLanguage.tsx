// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 22sdoN4aX8y6Pu1pTjChkF
// Component: HVk2b3e2ZXoqlG
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { useScreenVariants as useScreenVariants_0MRtZvbV1Afi8D } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 0MRtZvbV1AFI8D/globalVariant
import {
  UnnamedGlobalGroupOfVariantsValue,
  useUnnamedGlobalGroupOfVariants
} from "./PlasmicGlobalVariant__UnnamedGlobalGroupOfVariants"; // plasmic-import: 2ix5DLKYnXaUWp/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_commerce_storefront.module.css"; // plasmic-import: 22sdoN4aX8y6Pu1pTjChkF/projectcss
import sty from "./PlasmicCopyrightSocialLanguage.module.css"; // plasmic-import: HVk2b3e2ZXoqlG/css

export type PlasmicCopyrightSocialLanguage__VariantMembers = {};

export type PlasmicCopyrightSocialLanguage__VariantsArgs = {};
type VariantPropType = keyof PlasmicCopyrightSocialLanguage__VariantsArgs;
export const PlasmicCopyrightSocialLanguage__VariantProps =
  new Array<VariantPropType>();

export type PlasmicCopyrightSocialLanguage__ArgsType = {};
type ArgPropType = keyof PlasmicCopyrightSocialLanguage__ArgsType;
export const PlasmicCopyrightSocialLanguage__ArgProps =
  new Array<ArgPropType>();

export type PlasmicCopyrightSocialLanguage__OverridesType = {
  root?: p.Flex<"div">;
  text?: p.Flex<"div">;
};

export interface DefaultCopyrightSocialLanguageProps {
  className?: string;
}

function PlasmicCopyrightSocialLanguage__RenderFunc(props: {
  variants: PlasmicCopyrightSocialLanguage__VariantsArgs;
  args: PlasmicCopyrightSocialLanguage__ArgsType;
  overrides: PlasmicCopyrightSocialLanguage__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_0MRtZvbV1Afi8D(),
    unnamedGlobalGroupOfVariants: useUnnamedGlobalGroupOfVariants()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__ehNWd)}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__gsF2L)}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__pNzG6)}
          >
            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox__cOqWa)}>
                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__h5ZoJ,
                    {
                      [sty.linkglobal_unnamedGlobalGroupOfVariants_unnamedVariant__h5ZoJc8KUj]:
                        hasVariant(
                          globalVariants,
                          "unnamedGlobalGroupOfVariants",
                          "unnamedVariant"
                        )
                    }
                  )}
                  component={Link}
                  href={"https://www.plasmic.app/" as const}
                  platform={"nextjs"}
                >
                  {hasVariant(
                    globalVariants,
                    "unnamedGlobalGroupOfVariants",
                    "unnamedVariant"
                  )
                    ? "Deploy to Netlify"
                    : "Deploy to Netlify"}
                </p.PlasmicLink>
              </div>
            ) : null}
            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox__joyKn)}>
                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__gotxn,
                    {
                      [sty.linkglobal_unnamedGlobalGroupOfVariants_unnamedVariant__gotxnc8KUj]:
                        hasVariant(
                          globalVariants,
                          "unnamedGlobalGroupOfVariants",
                          "unnamedVariant"
                        )
                    }
                  )}
                  component={Link}
                  href={"https://www.plasmic.app/" as const}
                  platform={"nextjs"}
                >
                  {hasVariant(
                    globalVariants,
                    "unnamedGlobalGroupOfVariants",
                    "unnamedVariant"
                  )
                    ? "Clone in GitHub"
                    : "Clone in GitHub"}
                </p.PlasmicLink>
              </div>
            ) : null}
            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox__hfmoS)}>
                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__sSpI,
                    {
                      [sty.linkglobal_unnamedGlobalGroupOfVariants_unnamedVariant__sSpIC8KUj]:
                        hasVariant(
                          globalVariants,
                          "unnamedGlobalGroupOfVariants",
                          "unnamedVariant"
                        )
                    }
                  )}
                  component={Link}
                  href={"https://www.plasmic.app/" as const}
                  platform={"nextjs"}
                >
                  {hasVariant(
                    globalVariants,
                    "unnamedGlobalGroupOfVariants",
                    "unnamedVariant"
                  )
                    ? "Contribute"
                    : "Contribute"}
                </p.PlasmicLink>
              </div>
            ) : null}
          </p.Stack>

          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__rbE6C)}>
              <div
                data-plasmic-name={"text"}
                data-plasmic-override={overrides.text}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text
                )}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "© Company. All rights reserved. This site proudly built with  "
                  : "© Company. All rights reserved. This site proudly built with  "}
              </div>

              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__xXTbf
                )}
                component={Link}
                href={"https://www.plasmic.app" as const}
                platform={"nextjs"}
                target={"_blank" as const}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "Plasmic"
                  : "Plasmic"}
              </p.PlasmicLink>
            </div>
          ) : null}
        </p.Stack>
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "text"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCopyrightSocialLanguage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCopyrightSocialLanguage__VariantsArgs;
    args?: PlasmicCopyrightSocialLanguage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCopyrightSocialLanguage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCopyrightSocialLanguage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicCopyrightSocialLanguage__ArgProps,
      internalVariantPropNames: PlasmicCopyrightSocialLanguage__VariantProps
    });

    return PlasmicCopyrightSocialLanguage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCopyrightSocialLanguage";
  } else {
    func.displayName = `PlasmicCopyrightSocialLanguage.${nodeName}`;
  }
  return func;
}

export const PlasmicCopyrightSocialLanguage = Object.assign(
  // Top-level PlasmicCopyrightSocialLanguage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicCopyrightSocialLanguage
    internalVariantProps: PlasmicCopyrightSocialLanguage__VariantProps,
    internalArgProps: PlasmicCopyrightSocialLanguage__ArgProps
  }
);

export default PlasmicCopyrightSocialLanguage;
/* prettier-ignore-end */
