// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 22sdoN4aX8y6Pu1pTjChkF
// Component: SKEGE57ywhpzqy
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_commerce_storefront.module.css"; // plasmic-import: 22sdoN4aX8y6Pu1pTjChkF/projectcss
import sty from "./PlasmicProductMian.module.css"; // plasmic-import: SKEGE57ywhpzqy/css

export type PlasmicProductMian__VariantMembers = {};

export type PlasmicProductMian__VariantsArgs = {};
type VariantPropType = keyof PlasmicProductMian__VariantsArgs;
export const PlasmicProductMian__VariantProps = new Array<VariantPropType>();

export type PlasmicProductMian__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
};

type ArgPropType = keyof PlasmicProductMian__ArgsType;
export const PlasmicProductMian__ArgProps = new Array<ArgPropType>(
  "children",
  "slot",
  "slot2",
  "slot3"
);

export type PlasmicProductMian__OverridesType = {
  root?: p.Flex<"a"> & Partial<LinkProps>;
  h3?: p.Flex<"h3">;
  h5?: p.Flex<"h5">;
};

export interface DefaultProductMianProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
  className?: string;
}

function PlasmicProductMian__RenderFunc(props: {
  variants: PlasmicProductMian__VariantsArgs;
  args: PlasmicProductMian__ArgsType;
  overrides: PlasmicProductMian__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;

  return (
    <p.PlasmicLink
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.a,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
      component={Link}
      href={"/item" as const}
      platform={"nextjs"}
    >
      {p.renderPlasmicSlot({
        defaultContents: (
          <p.PlasmicImg
            alt={""}
            className={classNames(sty.img__iDz5)}
            displayHeight={"320px /* plasmic-token: aNKCpOfwV38Rsi */" as const}
            displayMaxHeight={"none" as const}
            displayMaxWidth={"100%" as const}
            displayMinHeight={"0" as const}
            displayMinWidth={"0" as const}
            displayWidth={"100%" as const}
            loading={"lazy" as const}
            src={{
              src: "/plasmic/commerce_storefront/images/shoe10.png",
              fullWidth: 964,
              fullHeight: 898,
              aspectRatio: undefined
            }}
          />
        ),

        value: args.slot3
      })}

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox___4UGr7)}
      >
        <h3
          data-plasmic-name={"h3"}
          data-plasmic-override={overrides.h3}
          className={classNames(projectcss.all, projectcss.h3, sty.h3)}
        >
          {p.renderPlasmicSlot({
            defaultContents: "Product Name",
            value: args.children
          })}
        </h3>

        <div className={classNames(projectcss.all, sty.freeBox__fXoyC)}>
          {p.renderPlasmicSlot({
            defaultContents:
              "A nam quisque orci ut vestibulum eget sem aliquet a dictumst condimentum",
            value: args.slot
          })}
        </div>

        <h5
          data-plasmic-name={"h5"}
          data-plasmic-override={overrides.h5}
          className={classNames(projectcss.all, projectcss.h5, sty.h5)}
        >
          {p.renderPlasmicSlot({
            defaultContents: "$ 20.88",
            value: args.slot2
          })}
        </h5>
      </p.Stack>
    </p.PlasmicLink>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "h3", "h5"],
  h3: ["h3"],
  h5: ["h5"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "a";
  h3: "h3";
  h5: "h5";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProductMian__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProductMian__VariantsArgs;
    args?: PlasmicProductMian__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProductMian__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicProductMian__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicProductMian__ArgProps,
      internalVariantPropNames: PlasmicProductMian__VariantProps
    });

    return PlasmicProductMian__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProductMian";
  } else {
    func.displayName = `PlasmicProductMian.${nodeName}`;
  }
  return func;
}

export const PlasmicProductMian = Object.assign(
  // Top-level PlasmicProductMian renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h3: makeNodeComponent("h3"),
    h5: makeNodeComponent("h5"),

    // Metadata about props expected for PlasmicProductMian
    internalVariantProps: PlasmicProductMian__VariantProps,
    internalArgProps: PlasmicProductMian__ArgProps
  }
);

export default PlasmicProductMian;
/* prettier-ignore-end */
