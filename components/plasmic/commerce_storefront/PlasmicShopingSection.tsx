// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 22sdoN4aX8y6Pu1pTjChkF
// Component: i0lYnyqtSwaOI9
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { useScreenVariants as useScreenVariants_0MRtZvbV1Afi8D } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 0MRtZvbV1AFI8D/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_commerce_storefront.module.css"; // plasmic-import: 22sdoN4aX8y6Pu1pTjChkF/projectcss
import sty from "./PlasmicShopingSection.module.css"; // plasmic-import: i0lYnyqtSwaOI9/css

import RightArrowIcon from "./icons/PlasmicIcon__RightArrow"; // plasmic-import: DyijSpL5ETAPCK/icon

export type PlasmicShopingSection__VariantMembers = {};

export type PlasmicShopingSection__VariantsArgs = {};
type VariantPropType = keyof PlasmicShopingSection__VariantsArgs;
export const PlasmicShopingSection__VariantProps = new Array<VariantPropType>();

export type PlasmicShopingSection__ArgsType = {};
type ArgPropType = keyof PlasmicShopingSection__ArgsType;
export const PlasmicShopingSection__ArgProps = new Array<ArgPropType>();

export type PlasmicShopingSection__OverridesType = {
  root?: p.Flex<"section">;
  container433?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  h2?: p.Flex<"h2">;
  link?: p.Flex<"a"> & Partial<LinkProps>;
  text?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
  img?: p.Flex<typeof p.PlasmicImg>;
};

export interface DefaultShopingSectionProps {
  className?: string;
}

function PlasmicShopingSection__RenderFunc(props: {
  variants: PlasmicShopingSection__VariantsArgs;
  args: PlasmicShopingSection__ArgsType;
  overrides: PlasmicShopingSection__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_0MRtZvbV1Afi8D()
  });

  return (
    <section
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"container433"}
        data-plasmic-override={overrides.container433}
        hasGap={true}
        className={classNames(projectcss.all, sty.container433)}
      >
        <div className={classNames(projectcss.all, sty.column__pscks)}>
          {true ? (
            <p.Stack
              as={"div"}
              data-plasmic-name={"freeBox"}
              data-plasmic-override={overrides.freeBox}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox)}
            >
              <h2
                data-plasmic-name={"h2"}
                data-plasmic-override={overrides.h2}
                className={classNames(
                  projectcss.all,
                  projectcss.h2,
                  projectcss.__wab_text,
                  sty.h2
                )}
              >
                {"A new shopping \nexperience"}
              </h2>

              {true ? (
                <p.Stack
                  as={p.PlasmicLink}
                  data-plasmic-name={"link"}
                  data-plasmic-override={overrides.link}
                  hasGap={true}
                  className={classNames(projectcss.all, projectcss.a, sty.link)}
                  component={Link}
                  href={"/item" as const}
                  platform={"nextjs"}
                >
                  <div
                    data-plasmic-name={"text"}
                    data-plasmic-override={overrides.text}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text
                    )}
                  >
                    {"Explore products"}
                  </div>

                  <RightArrowIcon
                    data-plasmic-name={"svg"}
                    data-plasmic-override={overrides.svg}
                    className={classNames(projectcss.all, sty.svg)}
                    role={"img"}
                  />
                </p.Stack>
              ) : null}
            </p.Stack>
          ) : null}
        </div>

        <div className={classNames(projectcss.all, sty.column__hIuLo)}>
          <p.PlasmicImg
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img)}
            displayHeight={
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? ("320px /* plasmic-token: aNKCpOfwV38Rsi */" as const)
                : ("661px" as const)
            }
            displayMaxHeight={"none" as const}
            displayMaxWidth={
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? ("100%" as const)
                : ("100%" as const)
            }
            displayMinHeight={"0" as const}
            displayMinWidth={"0" as const}
            displayWidth={
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? ("100%" as const)
                : ("783px" as const)
            }
            loading={"lazy" as const}
            src={{
              src: "/plasmic/commerce_storefront/images/exploreBanner1Png.png",
              fullWidth: 1200,
              fullHeight: 1508,
              aspectRatio: undefined
            }}
          />
        </div>
      </p.Stack>
    </section>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "container433", "freeBox", "h2", "link", "text", "svg", "img"],
  container433: ["container433", "freeBox", "h2", "link", "text", "svg", "img"],
  freeBox: ["freeBox", "h2", "link", "text", "svg"],
  h2: ["h2"],
  link: ["link", "text", "svg"],
  text: ["text"],
  svg: ["svg"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "section";
  container433: "div";
  freeBox: "div";
  h2: "h2";
  link: "a";
  text: "div";
  svg: "svg";
  img: typeof p.PlasmicImg;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicShopingSection__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicShopingSection__VariantsArgs;
    args?: PlasmicShopingSection__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicShopingSection__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicShopingSection__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicShopingSection__ArgProps,
      internalVariantPropNames: PlasmicShopingSection__VariantProps
    });

    return PlasmicShopingSection__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicShopingSection";
  } else {
    func.displayName = `PlasmicShopingSection.${nodeName}`;
  }
  return func;
}

export const PlasmicShopingSection = Object.assign(
  // Top-level PlasmicShopingSection renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    container433: makeNodeComponent("container433"),
    freeBox: makeNodeComponent("freeBox"),
    h2: makeNodeComponent("h2"),
    link: makeNodeComponent("link"),
    text: makeNodeComponent("text"),
    svg: makeNodeComponent("svg"),
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicShopingSection
    internalVariantProps: PlasmicShopingSection__VariantProps,
    internalArgProps: PlasmicShopingSection__ArgProps
  }
);

export default PlasmicShopingSection;
/* prettier-ignore-end */
