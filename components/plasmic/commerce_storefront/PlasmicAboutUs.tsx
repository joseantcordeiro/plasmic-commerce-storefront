// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 22sdoN4aX8y6Pu1pTjChkF
// Component: Vo3wpNbKv2be11
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import PaheHeaderMenuTextDark from "../../PaheHeaderMenuTextDark"; // plasmic-import: otPdDgODX-n5De/component
import Instagram from "../../Instagram"; // plasmic-import: SXdIN0VA4a2nJu/component
import Footer from "../../Footer"; // plasmic-import: eZWnvjMgxXz0vo/component

import { useScreenVariants as useScreenVariants_0MRtZvbV1Afi8D } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 0MRtZvbV1AFI8D/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_commerce_storefront.module.css"; // plasmic-import: 22sdoN4aX8y6Pu1pTjChkF/projectcss
import sty from "./PlasmicAboutUs.module.css"; // plasmic-import: Vo3wpNbKv2be11/css

export type PlasmicAboutUs__VariantMembers = {};

export type PlasmicAboutUs__VariantsArgs = {};
type VariantPropType = keyof PlasmicAboutUs__VariantsArgs;
export const PlasmicAboutUs__VariantProps = new Array<VariantPropType>();

export type PlasmicAboutUs__ArgsType = {};
type ArgPropType = keyof PlasmicAboutUs__ArgsType;
export const PlasmicAboutUs__ArgProps = new Array<ArgPropType>();

export type PlasmicAboutUs__OverridesType = {
  root?: p.Flex<"div">;
  paheHeaderMenuTextDark?: p.Flex<typeof PaheHeaderMenuTextDark>;
  container433?: p.Flex<"div">;
  container434?: p.Flex<"div">;
  container435?: p.Flex<"div">;
  container436?: p.Flex<"div">;
  instagram?: p.Flex<typeof Instagram>;
  footer?: p.Flex<typeof Footer>;
};

export interface DefaultAboutUsProps {}

function PlasmicAboutUs__RenderFunc(props: {
  variants: PlasmicAboutUs__VariantsArgs;
  args: PlasmicAboutUs__ArgsType;
  overrides: PlasmicAboutUs__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_0MRtZvbV1Afi8D()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{"About Us"}</title>
        <meta key="og:title" property="og:title" content={"About Us"} />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <PaheHeaderMenuTextDark
            data-plasmic-name={"paheHeaderMenuTextDark"}
            data-plasmic-override={overrides.paheHeaderMenuTextDark}
            className={classNames("__wab_instance", sty.paheHeaderMenuTextDark)}
          />

          <section className={classNames(projectcss.all, sty.section___9Tssa)}>
            <p.Stack
              as={"div"}
              data-plasmic-name={"container433"}
              data-plasmic-override={overrides.container433}
              hasGap={true}
              className={classNames(projectcss.all, sty.container433)}
            >
              <div className={classNames(projectcss.all, sty.column__iE49K)}>
                {true ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__dxbGj)}
                  >
                    <h2
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2__jqHn9
                      )}
                    >
                      {"Commerce.js Demo Store"}
                    </h2>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__mK9Rh
                      )}
                    >
                      {
                        "This is an open source storefront built using Checâ€™s headless architecture and the Commerce.js SDK. Commerce.js is a smarter, more efficient way to build eCommerce projects, and we hope you can see that as you explore the world custom eCommerce. Please build on top of, or pick apart this project for your own use. Everything in this project, from the storefront, to the cart, checkout and receipt, is 100% customizable. To build more custom eCommerce projects, using any frontend framework or platform, head over to commercejs.com."
                      }
                    </div>

                    {true ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__x2N12
                        )}
                      >
                        <button
                          className={classNames(
                            projectcss.all,
                            projectcss.button,
                            projectcss.__wab_text,
                            sty.button__e4A8O
                          )}
                        >
                          {"Documentation"}
                        </button>

                        <button
                          className={classNames(
                            projectcss.all,
                            projectcss.button,
                            projectcss.__wab_text,
                            sty.button__xwkz2
                          )}
                        >
                          {"Guides from the community"}
                        </button>
                      </p.Stack>
                    ) : null}
                  </p.Stack>
                ) : null}
              </div>

              <div className={classNames(projectcss.all, sty.column__mck31)}>
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__e9UNa)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/commerce_storefront/images/cjsIllustrationsvg.svg",
                    fullWidth: 195,
                    fullHeight: 150,
                    aspectRatio: 1.301887
                  }}
                />
              </div>
            </p.Stack>
          </section>

          <section className={classNames(projectcss.all, sty.section__dCgE)}>
            <p.Stack
              as={"div"}
              data-plasmic-name={"container434"}
              data-plasmic-override={overrides.container434}
              hasGap={true}
              className={classNames(projectcss.all, sty.container434)}
            >
              <div className={classNames(projectcss.all, sty.column__gFVbK)}>
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__ilpIo)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/commerce_storefront/images/netlifyIllustrationsvg.svg",
                    fullWidth: 217,
                    fullHeight: 150,
                    aspectRatio: 1.448276
                  }}
                />
              </div>

              <div className={classNames(projectcss.all, sty.column__bSc0N)}>
                {true ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__hiBbz)}
                  >
                    <h2
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2__lOuB
                      )}
                    >
                      {"Deploy to Netlify"}
                    </h2>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__vWtCn
                      )}
                    >
                      {
                        "If you would like to deploy this project live today, click the button below and watch the magic happen!"
                      }
                    </div>

                    {true ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__bQu7T
                        )}
                      >
                        <button
                          className={classNames(
                            projectcss.all,
                            projectcss.button,
                            projectcss.__wab_text,
                            sty.button__uBF8
                          )}
                        >
                          {"Deploy to Netlify"}
                        </button>
                      </p.Stack>
                    ) : null}
                  </p.Stack>
                ) : null}
              </div>
            </p.Stack>
          </section>

          <section className={classNames(projectcss.all, sty.section__ypVn7)}>
            <p.Stack
              as={"div"}
              data-plasmic-name={"container435"}
              data-plasmic-override={overrides.container435}
              hasGap={true}
              className={classNames(projectcss.all, sty.container435)}
            >
              <div className={classNames(projectcss.all, sty.column__pyyt)}>
                {true ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__nm9Z)}
                  >
                    <h2
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2__gvmcb
                      )}
                    >
                      {"Clone in GitHub"}
                    </h2>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__da6Yb
                      )}
                    >
                      {
                        "If you would like to clone this project and do a manual setup, go to the repository below!"
                      }
                    </div>

                    {true ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__t1Jky
                        )}
                      >
                        <button
                          className={classNames(
                            projectcss.all,
                            projectcss.button,
                            projectcss.__wab_text,
                            sty.button__vkxc1
                          )}
                        >
                          {"Clone in GitHub"}
                        </button>
                      </p.Stack>
                    ) : null}
                  </p.Stack>
                ) : null}
              </div>

              <div className={classNames(projectcss.all, sty.column__ku4Pp)}>
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__vXgpL)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  loading={"lazy" as const}
                  src={
                    "/plasmic/commerce_storefront/images/githubIllustrationsvg.svg"
                  }
                />
              </div>
            </p.Stack>
          </section>

          <section className={classNames(projectcss.all, sty.section__pQ7)}>
            <p.Stack
              as={"div"}
              data-plasmic-name={"container436"}
              data-plasmic-override={overrides.container436}
              hasGap={true}
              className={classNames(projectcss.all, sty.container436)}
            >
              <div className={classNames(projectcss.all, sty.column__vpS4S)}>
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__q82CQ)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  loading={"lazy" as const}
                  src={
                    "/plasmic/commerce_storefront/images/blogIllustration1Svg.svg"
                  }
                />
              </div>

              <div className={classNames(projectcss.all, sty.column___0OnWh)}>
                {true ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__qYaYo)}
                  >
                    <h2
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2__ge46D
                      )}
                    >
                      {"Technical Blog"}
                    </h2>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__wVyYm
                      )}
                    >
                      {
                        "Read the full technical tutorial here if you want to get into the nitty gritty!"
                      }
                    </div>

                    {true ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__vfScP
                        )}
                      >
                        <button
                          className={classNames(
                            projectcss.all,
                            projectcss.button,
                            projectcss.__wab_text,
                            sty.button__aindR
                          )}
                        >
                          {"Read Blog"}
                        </button>
                      </p.Stack>
                    ) : null}
                  </p.Stack>
                ) : null}
              </div>
            </p.Stack>
          </section>

          <Instagram
            data-plasmic-name={"instagram"}
            data-plasmic-override={overrides.instagram}
            className={classNames("__wab_instance", sty.instagram)}
          />

          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "paheHeaderMenuTextDark",
    "container433",
    "container434",
    "container435",
    "container436",
    "instagram",
    "footer"
  ],
  paheHeaderMenuTextDark: ["paheHeaderMenuTextDark"],
  container433: ["container433"],
  container434: ["container434"],
  container435: ["container435"],
  container436: ["container436"],
  instagram: ["instagram"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  paheHeaderMenuTextDark: typeof PaheHeaderMenuTextDark;
  container433: "div";
  container434: "div";
  container435: "div";
  container436: "div";
  instagram: typeof Instagram;
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAboutUs__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAboutUs__VariantsArgs;
    args?: PlasmicAboutUs__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAboutUs__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicAboutUs__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicAboutUs__ArgProps,
      internalVariantPropNames: PlasmicAboutUs__VariantProps
    });

    return PlasmicAboutUs__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAboutUs";
  } else {
    func.displayName = `PlasmicAboutUs.${nodeName}`;
  }
  return func;
}

export const PlasmicAboutUs = Object.assign(
  // Top-level PlasmicAboutUs renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    paheHeaderMenuTextDark: makeNodeComponent("paheHeaderMenuTextDark"),
    container433: makeNodeComponent("container433"),
    container434: makeNodeComponent("container434"),
    container435: makeNodeComponent("container435"),
    container436: makeNodeComponent("container436"),
    instagram: makeNodeComponent("instagram"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicAboutUs
    internalVariantProps: PlasmicAboutUs__VariantProps,
    internalArgProps: PlasmicAboutUs__ArgProps
  }
);

export default PlasmicAboutUs;
/* prettier-ignore-end */
