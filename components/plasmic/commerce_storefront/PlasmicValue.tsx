// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 22sdoN4aX8y6Pu1pTjChkF
// Component: KQA99gjpzsJSP
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: 5pNgdi1r2ZWc-/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_commerce_storefront.module.css"; // plasmic-import: 22sdoN4aX8y6Pu1pTjChkF/projectcss
import sty from "./PlasmicValue.module.css"; // plasmic-import: KQA99gjpzsJSP/css

import TakeOffIcon from "./icons/PlasmicIcon__TakeOff"; // plasmic-import: c3OLkoi5jQr0pw/icon
import MenuIcon from "./icons/PlasmicIcon__Menu"; // plasmic-import: bnHDD3jwDYmIDK/icon
import RightArrowIcon from "./icons/PlasmicIcon__RightArrow"; // plasmic-import: DyijSpL5ETAPCK/icon

export type PlasmicValue__VariantMembers = {
  topBottom: "topBottom";
  center: "center";
  withButton: "withButton";
};

export type PlasmicValue__VariantsArgs = {
  topBottom?: SingleBooleanChoiceArg<"topBottom">;
  center?: SingleBooleanChoiceArg<"center">;
  withButton?: SingleBooleanChoiceArg<"withButton">;
};

type VariantPropType = keyof PlasmicValue__VariantsArgs;
export const PlasmicValue__VariantProps = new Array<VariantPropType>(
  "topBottom",
  "center",
  "withButton"
);

export type PlasmicValue__ArgsType = {
  children?: React.ReactNode;
  icon?: React.ReactNode;
  children2?: React.ReactNode;
};

type ArgPropType = keyof PlasmicValue__ArgsType;
export const PlasmicValue__ArgProps = new Array<ArgPropType>(
  "children",
  "icon",
  "children2"
);

export type PlasmicValue__OverridesType = {
  root?: p.Flex<"div">;
};

export interface DefaultValueProps {
  children?: React.ReactNode;
  icon?: React.ReactNode;
  children2?: React.ReactNode;
  topBottom?: SingleBooleanChoiceArg<"topBottom">;
  center?: SingleBooleanChoiceArg<"center">;
  withButton?: SingleBooleanChoiceArg<"withButton">;
  className?: string;
}

function PlasmicValue__RenderFunc(props: {
  variants: PlasmicValue__VariantsArgs;
  args: PlasmicValue__ArgsType;
  overrides: PlasmicValue__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.rootcenter]: hasVariant(variants, "center", "center"),
          [sty.roottopBottom]: hasVariant(variants, "topBottom", "topBottom"),
          [sty.rootwithButton]: hasVariant(variants, "withButton", "withButton")
        }
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__nAqry, {
          [sty.freeBoxcenter__nAqryG6L7E]: hasVariant(
            variants,
            "center",
            "center"
          ),
          [sty.freeBoxtopBottom__nAqryS6NjA]: hasVariant(
            variants,
            "topBottom",
            "topBottom"
          )
        })}
      >
        <div className={classNames(projectcss.all, sty.freeBox__zC27V)}>
          {p.renderPlasmicSlot({
            defaultContents: (
              <TakeOffIcon
                className={classNames(projectcss.all, sty.svg___9JYv)}
                role={"img"}
              />
            ),

            value: args.icon
          })}
        </div>
      </div>

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__nVX1, {
          [sty.freeBoxcenter__nVX1G6L7E]: hasVariant(
            variants,
            "center",
            "center"
          ),
          [sty.freeBoxwithButton__nVX1CgJ0S]: hasVariant(
            variants,
            "withButton",
            "withButton"
          )
        })}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <React.Fragment>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__er7Si
                )}
              >
                {"Worldwide Shipping"}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__cZ44Q
                )}
              >
                {"Special financing and earn rewards."}
              </div>
            </React.Fragment>
          ),
          value: args.children,
          className: classNames(sty.slotTargetChildren, {
            [sty.slotTargetChildrencenter]: hasVariant(
              variants,
              "center",
              "center"
            )
          })
        })}
      </p.Stack>

      {(hasVariant(variants, "withButton", "withButton") ? true : false) ? (
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__ck6Zq, {
            [sty.freeBoxcenter__ck6ZqG6L7E]: hasVariant(
              variants,
              "center",
              "center"
            ),
            [sty.freeBoxwithButton__ck6ZqCgJ0S]: hasVariant(
              variants,
              "withButton",
              "withButton"
            )
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <Button
                className={classNames("__wab_instance", sty.button__l69Vi, {
                  [sty.buttonwithButton__l69ViCgJ0S]: hasVariant(
                    variants,
                    "withButton",
                    "withButton"
                  )
                })}
                colors={"black" as const}
                endIcon={
                  <RightArrowIcon
                    className={classNames(projectcss.all, sty.svg__qq4Wv)}
                    role={"img"}
                  />
                }
                rounded={true}
                size={"large" as const}
              />
            ),

            value: args.children2,
            className: classNames(sty.slotTargetChildren2, {
              [sty.slotTargetChildren2center]: hasVariant(
                variants,
                "center",
                "center"
              ),
              [sty.slotTargetChildren2withButton]: hasVariant(
                variants,
                "withButton",
                "withButton"
              )
            })
          })}
        </p.Stack>
      ) : null}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicValue__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicValue__VariantsArgs;
    args?: PlasmicValue__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicValue__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicValue__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicValue__ArgProps,
      internalVariantPropNames: PlasmicValue__VariantProps
    });

    return PlasmicValue__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicValue";
  } else {
    func.displayName = `PlasmicValue.${nodeName}`;
  }
  return func;
}

export const PlasmicValue = Object.assign(
  // Top-level PlasmicValue renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicValue
    internalVariantProps: PlasmicValue__VariantProps,
    internalArgProps: PlasmicValue__ArgProps
  }
);

export default PlasmicValue;
/* prettier-ignore-end */
