// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 22sdoN4aX8y6Pu1pTjChkF
// Component: 5pNgdi1r2ZWc-
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";
import * as pp from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_commerce_storefront.module.css"; // plasmic-import: 22sdoN4aX8y6Pu1pTjChkF/projectcss
import sty from "./PlasmicButton.module.css"; // plasmic-import: 5pNgdi1r2ZWc-/css

import MenuIcon from "./icons/PlasmicIcon__Menu"; // plasmic-import: bnHDD3jwDYmIDK/icon

export type PlasmicButton__VariantMembers = {
  showStartIcon: "showStartIcon";
  showEndIcon: "showEndIcon";
  iconOnly: "iconOnly";
  colors:
    | "gray"
    | "white"
    | "blue"
    | "black"
    | "lightGray"
    | "lightGrayOutline"
    | "link";
  size: "large" | "small" | "narrow";
  rounded: "rounded";
  states: "active";
  isDisabled: "isDisabled";
};

export type PlasmicButton__VariantsArgs = {
  showStartIcon?: SingleBooleanChoiceArg<"showStartIcon">;
  showEndIcon?: SingleBooleanChoiceArg<"showEndIcon">;
  iconOnly?: SingleBooleanChoiceArg<"iconOnly">;
  colors?: SingleChoiceArg<
    | "gray"
    | "white"
    | "blue"
    | "black"
    | "lightGray"
    | "lightGrayOutline"
    | "link"
  >;
  size?: SingleChoiceArg<"large" | "small" | "narrow">;
  rounded?: SingleBooleanChoiceArg<"rounded">;
  states?: SingleChoiceArg<"active">;
  isDisabled?: SingleBooleanChoiceArg<"isDisabled">;
};

type VariantPropType = keyof PlasmicButton__VariantsArgs;
export const PlasmicButton__VariantProps = new Array<VariantPropType>(
  "showStartIcon",
  "showEndIcon",
  "iconOnly",
  "colors",
  "size",
  "rounded",
  "states",
  "isDisabled"
);

export type PlasmicButton__ArgsType = {
  startIcon?: React.ReactNode;
  endIcon?: React.ReactNode;
  link?: string;
};

type ArgPropType = keyof PlasmicButton__ArgsType;
export const PlasmicButton__ArgProps = new Array<ArgPropType>(
  "startIcon",
  "endIcon",
  "link"
);

export type PlasmicButton__OverridesType = {
  root?: p.Flex<"button">;
};

export interface DefaultButtonProps extends pp.BaseButtonProps {
  iconOnly?: SingleBooleanChoiceArg<"iconOnly">;
  colors?: SingleChoiceArg<
    | "gray"
    | "white"
    | "blue"
    | "black"
    | "lightGray"
    | "lightGrayOutline"
    | "link"
  >;
  size?: SingleChoiceArg<"large" | "small" | "narrow">;
  rounded?: SingleBooleanChoiceArg<"rounded">;
  states?: SingleChoiceArg<"active">;
}

function PlasmicButton__RenderFunc(props: {
  variants: PlasmicButton__VariantsArgs;
  args: PlasmicButton__ArgsType;
  overrides: PlasmicButton__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;

  return (
    <p.Stack
      as={"button"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.button,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.rootcolors_black]: hasVariant(variants, "colors", "black"),
          [sty.rootcolors_black_showEndIcon]:
            hasVariant(variants, "showEndIcon", "showEndIcon") &&
            hasVariant(variants, "colors", "black"),
          [sty.rootcolors_blue]: hasVariant(variants, "colors", "blue"),
          [sty.rootcolors_gray]: hasVariant(variants, "colors", "gray"),
          [sty.rootcolors_lightGrayOutline]: hasVariant(
            variants,
            "colors",
            "lightGrayOutline"
          ),
          [sty.rootcolors_lightGray]: hasVariant(
            variants,
            "colors",
            "lightGray"
          ),
          [sty.rootcolors_link]: hasVariant(variants, "colors", "link"),
          [sty.rootcolors_white]: hasVariant(variants, "colors", "white"),
          [sty.rootisDisabled]: hasVariant(
            variants,
            "isDisabled",
            "isDisabled"
          ),
          [sty.rootrounded]: hasVariant(variants, "rounded", "rounded"),
          [sty.rootshowEndIcon]: hasVariant(
            variants,
            "showEndIcon",
            "showEndIcon"
          ),
          [sty.rootshowStartIcon]: hasVariant(
            variants,
            "showStartIcon",
            "showStartIcon"
          ),
          [sty.rootshowStartIcon_colors_white]:
            hasVariant(variants, "colors", "white") &&
            hasVariant(variants, "showStartIcon", "showStartIcon"),
          [sty.rootsize_large]: hasVariant(variants, "size", "large"),
          [sty.rootsize_large_colors_black_showEndIcon]:
            hasVariant(variants, "showEndIcon", "showEndIcon") &&
            hasVariant(variants, "colors", "black") &&
            hasVariant(variants, "size", "large"),
          [sty.rootsize_large_rounded]:
            hasVariant(variants, "rounded", "rounded") &&
            hasVariant(variants, "size", "large"),
          [sty.rootsize_large_rounded_colors_black_showEndIcon]:
            hasVariant(variants, "showEndIcon", "showEndIcon") &&
            hasVariant(variants, "colors", "black") &&
            hasVariant(variants, "size", "large") &&
            hasVariant(variants, "rounded", "rounded"),
          [sty.rootsize_large_rounded_showEndIcon]:
            hasVariant(variants, "showEndIcon", "showEndIcon") &&
            hasVariant(variants, "size", "large") &&
            hasVariant(variants, "rounded", "rounded"),
          [sty.rootsize_large_showEndIcon]:
            hasVariant(variants, "showEndIcon", "showEndIcon") &&
            hasVariant(variants, "size", "large"),
          [sty.rootsize_narrow]: hasVariant(variants, "size", "narrow"),
          [sty.rootsize_small]: hasVariant(variants, "size", "small"),
          [sty.rootstates_active]: hasVariant(variants, "states", "active")
        }
      )}
    >
      {(
        hasVariant(variants, "iconOnly", "iconOnly")
          ? true
          : hasVariant(variants, "showEndIcon", "showEndIcon")
          ? false
          : hasVariant(variants, "showStartIcon", "showStartIcon")
          ? true
          : false
      ) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox__nXoo, {
            [sty.freeBoxcolors_white__nXoofn4Sc]: hasVariant(
              variants,
              "colors",
              "white"
            ),
            [sty.freeBoxiconOnly__nXooRCHx]: hasVariant(
              variants,
              "iconOnly",
              "iconOnly"
            ),
            [sty.freeBoxshowEndIcon__nXoosktmX]: hasVariant(
              variants,
              "showEndIcon",
              "showEndIcon"
            ),
            [sty.freeBoxshowStartIcon__nXooPa8Gs]: hasVariant(
              variants,
              "showStartIcon",
              "showStartIcon"
            ),
            [sty.freeBoxshowStartIcon_colors_white__nXooPa8GsFn4Sc]:
              hasVariant(variants, "colors", "white") &&
              hasVariant(variants, "showStartIcon", "showStartIcon"),
            [sty.freeBoxsize_large__nXooGZiF]: hasVariant(
              variants,
              "size",
              "large"
            ),
            [sty.freeBoxsize_small__nXooFxqc5]: hasVariant(
              variants,
              "size",
              "small"
            )
          })}
        >
          {(hasVariant(variants, "showEndIcon", "showEndIcon") ? true : true)
            ? p.renderPlasmicSlot({
                defaultContents: (
                  <MenuIcon
                    className={classNames(projectcss.all, sty.svg__ziyjO)}
                    role={"img"}
                  />
                ),

                value: args.startIcon,
                className: classNames(sty.slotTargetStartIcon, {
                  [sty.slotTargetStartIconcolors_black]: hasVariant(
                    variants,
                    "colors",
                    "black"
                  ),
                  [sty.slotTargetStartIconcolors_blue]: hasVariant(
                    variants,
                    "colors",
                    "blue"
                  ),
                  [sty.slotTargetStartIconcolors_gray]: hasVariant(
                    variants,
                    "colors",
                    "gray"
                  ),
                  [sty.slotTargetStartIconshowEndIcon]: hasVariant(
                    variants,
                    "showEndIcon",
                    "showEndIcon"
                  ),
                  [sty.slotTargetStartIconsize_large]: hasVariant(
                    variants,
                    "size",
                    "large"
                  ),
                  [sty.slotTargetStartIconsize_small]: hasVariant(
                    variants,
                    "size",
                    "small"
                  )
                })
              })
            : null}
        </div>
      ) : null}
      {(hasVariant(variants, "showEndIcon", "showEndIcon") ? true : false) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox___0JzU8, {
            [sty.freeBoxshowEndIcon___0JzU8SktmX]: hasVariant(
              variants,
              "showEndIcon",
              "showEndIcon"
            ),
            [sty.freeBoxsize_small___0JzU8Fxqc5]: hasVariant(
              variants,
              "size",
              "small"
            )
          })}
        >
          {(hasVariant(variants, "showEndIcon", "showEndIcon") ? true : false)
            ? p.renderPlasmicSlot({
                defaultContents: (
                  <MenuIcon
                    className={classNames(projectcss.all, sty.svg__tErmr)}
                    role={"img"}
                  />
                ),

                value: args.endIcon,
                className: classNames(sty.slotTargetEndIcon, {
                  [sty.slotTargetEndIconcolors_black]: hasVariant(
                    variants,
                    "colors",
                    "black"
                  ),
                  [sty.slotTargetEndIconcolors_link]: hasVariant(
                    variants,
                    "colors",
                    "link"
                  ),
                  [sty.slotTargetEndIconshowEndIcon]: hasVariant(
                    variants,
                    "showEndIcon",
                    "showEndIcon"
                  ),
                  [sty.slotTargetEndIconsize_large_rounded_colors_black_showEndIcon]:
                    hasVariant(variants, "showEndIcon", "showEndIcon") &&
                    hasVariant(variants, "colors", "black") &&
                    hasVariant(variants, "size", "large") &&
                    hasVariant(variants, "rounded", "rounded")
                })
              })
            : null}
        </div>
      ) : null}
    </p.Stack>
  ) as React.ReactElement | null;
}

function useBehavior<P extends pp.BaseButtonProps>(
  props: P,
  ref: pp.ButtonRef
) {
  const b = pp.useButton<P, typeof PlasmicButton>(
    PlasmicButton,
    props,
    {
      showStartIconVariant: {
        group: "showStartIcon",
        variant: "showStartIcon"
      },
      showEndIconVariant: { group: "showEndIcon", variant: "showEndIcon" },
      isDisabledVariant: { group: "isDisabled", variant: "isDisabled" },
      contentSlot: "children",
      startIconSlot: "startIcon",
      endIconSlot: "endIcon",
      root: "root"
    },

    ref
  );

  if (b.plasmicProps.overrides.root.as === "a") {
    b.plasmicProps.overrides.root.as = p.PlasmicLink;
    b.plasmicProps.overrides.root.props.component = Link;
    b.plasmicProps.overrides.root.props.platform = "nextjs";
  }
  return b;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "button";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicButton__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicButton__VariantsArgs;
    args?: PlasmicButton__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicButton__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicButton__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicButton__ArgProps,
      internalVariantPropNames: PlasmicButton__VariantProps
    });

    return PlasmicButton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicButton";
  } else {
    func.displayName = `PlasmicButton.${nodeName}`;
  }
  return func;
}

export const PlasmicButton = Object.assign(
  // Top-level PlasmicButton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicButton
    internalVariantProps: PlasmicButton__VariantProps,
    internalArgProps: PlasmicButton__ArgProps,

    useBehavior
  }
);

export default PlasmicButton;
/* prettier-ignore-end */
