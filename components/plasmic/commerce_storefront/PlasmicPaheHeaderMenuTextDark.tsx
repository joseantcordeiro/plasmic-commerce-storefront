// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 22sdoN4aX8y6Pu1pTjChkF
// Component: otPdDgODX-n5De
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { useScreenVariants as useScreenVariants_0MRtZvbV1Afi8D } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 0MRtZvbV1AFI8D/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_commerce_storefront.module.css"; // plasmic-import: 22sdoN4aX8y6Pu1pTjChkF/projectcss
import sty from "./PlasmicPaheHeaderMenuTextDark.module.css"; // plasmic-import: otPdDgODX-n5De/css

import CartIcon from "./icons/PlasmicIcon__Cart"; // plasmic-import: rgVEHx_O4JVatY/icon

export type PlasmicPaheHeaderMenuTextDark__VariantMembers = {};

export type PlasmicPaheHeaderMenuTextDark__VariantsArgs = {};
type VariantPropType = keyof PlasmicPaheHeaderMenuTextDark__VariantsArgs;
export const PlasmicPaheHeaderMenuTextDark__VariantProps =
  new Array<VariantPropType>();

export type PlasmicPaheHeaderMenuTextDark__ArgsType = {};
type ArgPropType = keyof PlasmicPaheHeaderMenuTextDark__ArgsType;
export const PlasmicPaheHeaderMenuTextDark__ArgProps = new Array<ArgPropType>();

export type PlasmicPaheHeaderMenuTextDark__OverridesType = {
  root?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
};

export interface DefaultPaheHeaderMenuTextDarkProps {
  className?: string;
}

function PlasmicPaheHeaderMenuTextDark__RenderFunc(props: {
  variants: PlasmicPaheHeaderMenuTextDark__VariantsArgs;
  args: PlasmicPaheHeaderMenuTextDark__ArgsType;
  overrides: PlasmicPaheHeaderMenuTextDark__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_0MRtZvbV1Afi8D()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__fVky3)}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__vsBr3)}
        >
          <p.PlasmicLink
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__cplvI
            )}
            component={Link}
            href={"/category" as const}
            platform={"nextjs"}
          >
            {"Shop"}
          </p.PlasmicLink>

          <p.PlasmicLink
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__jugvY
            )}
            component={Link}
            href={"/aboutus" as const}
            platform={"nextjs"}
          >
            {"About"}
          </p.PlasmicLink>
        </p.Stack>

        <div className={classNames(projectcss.all, sty.freeBox___8A3M)}>
          <p.PlasmicLink
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__bh4Ra
            )}
            component={Link}
            href={
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? ("/" as const)
                : ("/" as const)
            }
            platform={"nextjs"}
          >
            {hasVariant(globalVariants, "screen", "mobileOnly")
              ? "Commerce"
              : "Commerce"}
          </p.PlasmicLink>
        </div>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__wu88D)}
        >
          <p.PlasmicLink
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__x7V25
            )}
            component={Link}
            href={"/aboutus" as const}
            platform={"nextjs"}
          >
            {"Login"}
          </p.PlasmicLink>

          <CartIcon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(projectcss.all, sty.svg)}
            role={"img"}
          />
        </p.Stack>
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "svg"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPaheHeaderMenuTextDark__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPaheHeaderMenuTextDark__VariantsArgs;
    args?: PlasmicPaheHeaderMenuTextDark__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPaheHeaderMenuTextDark__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPaheHeaderMenuTextDark__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicPaheHeaderMenuTextDark__ArgProps,
      internalVariantPropNames: PlasmicPaheHeaderMenuTextDark__VariantProps
    });

    return PlasmicPaheHeaderMenuTextDark__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPaheHeaderMenuTextDark";
  } else {
    func.displayName = `PlasmicPaheHeaderMenuTextDark.${nodeName}`;
  }
  return func;
}

export const PlasmicPaheHeaderMenuTextDark = Object.assign(
  // Top-level PlasmicPaheHeaderMenuTextDark renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicPaheHeaderMenuTextDark
    internalVariantProps: PlasmicPaheHeaderMenuTextDark__VariantProps,
    internalArgProps: PlasmicPaheHeaderMenuTextDark__ArgProps
  }
);

export default PlasmicPaheHeaderMenuTextDark;
/* prettier-ignore-end */
